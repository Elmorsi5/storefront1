#Models:
1- You should differ between what is applied to the database[need to make new migration]- and what applay to the admin site only[no need to migrate]
2- When building a generic model, don't make it interact with you main models or apps directly [store_cutom]



#DBMS:
1-the DBMS we use is mysql
2- DataGrip: workstation to make it easy to interact with mysql
3- Full Picture: DataGrip->mysql->database

#APIs:
1- Is there a difference between RESTful[Representaional State Transfer] APIs and REST Framework?constrains and rules - the real implementation
2- what is the Charastictis for RESTful? Data Representaiona[JSON] - HTTP Methods - use URL to resource locator
3- What is JSON? JavaScript Object Notation?it is how we represent object in java inside curly brackts 
4- in Http methods: what is the difference between PUT and PATCH? Put udate all - Patch update specific fields

#REST Framework:
1- what happens when we decorate django view with api_view from rest Framework? - in the term of requeset object - 
2- What is browsable api page?
3- Is is better to use 404? or use constant?
4- I API model is the same of Data object Model? N
5- API is the interface of our application, the remote control buttons, object model is the inside implement of our application as it can be changed or updated
6- API endpoint [remote buttons] difficult to be changedm but the entire process can be
7- we have 4 ways to serialize a relationship: [primary key - String - Nested Object - Hyperlink]


#Building endpoint:
##serialize-> GET:
1- Create the serializer with the fields you want to return to the customer
2- Take care of fields that didn't belong to the queryset that you will serializer.
3- if fields did not belong to the queryset, the serializer will search for a defination to it inside the serializer class 
3.1 - this field may be a column from a method or ........

##Deserialize:
easy isa